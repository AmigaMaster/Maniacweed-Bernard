// Main script for module 'ShowHotspots'

bool _showhotspots_enabled;

struct _hotspotinfo {
  int minx;
  int miny;
  int maxx;
  int maxy;
  int there;
};
_hotspotinfo _hi[30];

int _showhotspots_key=32;         // default key: space
FontType _showhotspots_font=0;         // default font: 0
bool _showhotspots_allcaps=false; // default: allcaps turned off
int r=200;                        // default font color: red
int g=70, b=70;
int islot=-1;                     // default icon: drawn circle
int ox, oy;

static function ShowHotspots::SetKey(eKeyCode keycode) {
  _showhotspots_key = keycode;
}

static function ShowHotspots::SetFont(FontType font, bool allcaps, int rr, int gg, int bb) {
  _showhotspots_font = font;
  _showhotspots_allcaps = allcaps;
  r = rr; g = gg; b = bb;
}

static function ShowHotspots::Enable() {
  _showhotspots_enabled = true;
}

static function ShowHotspots::Disable() {
  _showhotspots_enabled = false;
}

static function ShowHotspots::SetIcon(int slot, int xOffset, int yOffset) {
  islot = slot;
  ox = xOffset;
  oy = yOffset;
}

function noloopcheck _SearchHotspots() {
  for (int i = 0; i < 30; i++) {
    _hi[i].minx = Room.Width;  _hi[i].maxx = -1;
    _hi[i].miny = Room.Height; _hi[i].maxy = -1;
    _hi[i].there = false;
  }

  int ss = 4; // search step
  
  Hotspot* h;
  for (int y = 0; y < Room.Height; y += ss) {
    for (int x = 0; x < Room.Width; x += ss) {
      h = Hotspot.GetAtRoomXY(x, y);
      if (h.ID > 0 && h.Enabled) {
        int i = h.ID;
        _hi[i].there = true;
        if (x < _hi[i].minx) _hi[i].minx = x;
        if (x > _hi[i].maxx) _hi[i].maxx = x;
        if (y < _hi[i].miny) _hi[i].miny = y;
        if (y > _hi[i].maxy) _hi[i].maxy = y;
      }
    }
  }
}

String Umlaut(String s, String umlaut, String subs) {

  int up; // umlaut position
  
  while(up > -1) {
    up = s.Contains(umlaut);
    if (up > -1) s = String.Format("%s%s%s", s.Truncate(up), subs, s.Substring(up + 1, s.Length - 1 - up));
  }

  return s;
}

String Umlauts(String s) {

  s = Umlaut(s, "�", "Ae");
  s = Umlaut(s, "�", "ae");
  s = Umlaut(s, "�", "Oe");
  s = Umlaut(s, "�", "oe");
  s = Umlaut(s, "�", "Ue");  
  s = Umlaut(s, "�", "ue");  
  
  return s;
}

DrawingSurface* drs;

function _DrawSpot(int x, int y, String name) {
  drs.DrawingColor = Game.GetColorFromRGB(r, g, b);
  if (islot == -1) drs.DrawCircle(x, y, 2);
  else drs.DrawImage(x - ox, y - oy, islot);
  
  if (_showhotspots_font == -1) return; // no captions
  
  String s = name;
  if (s.Contains(">") > -1) s = s.Truncate(s.Length-2);
  s = Umlauts(s);
  if (_showhotspots_allcaps) s = s.UpperCase();
    
  int pox=4;
  int poy=3;
  
  int w = GetTextWidth(s, _showhotspots_font);
  int max_visible_x = Screen.Width + Screen.Viewport.Camera.X;
  int cut_off = x + pox + w - max_visible_x + 2;
  if (cut_off > 0) pox -= cut_off;
  
  drs.DrawingColor = Game.GetColorFromRGB(1, 1, 1);
  
  int xx;
  int yy=-1;
  while (yy<2) {
    xx=-1;
    while (xx<2) {
      drs.DrawString(x+xx+pox, y+yy+poy, _showhotspots_font, s);
      xx++;
    }
    yy++;
  }
  drs.DrawingColor = Game.GetColorFromRGB(r, g, b);
  drs.DrawString(x+pox, y+poy, _showhotspots_font,s);
}

bool ovis[30];
bool cvis[500];

int last_room = -1;

function _ShowHotspots() {
  
  drs = Room.GetDrawingSurfaceForBackground();

  int x, y;

  // objects
  Object*o;
  int i;
  for (i = 0; i < Room.ObjectCount; i++) {
    o = object[i];
    if (ovis[i] && o.Clickable) {
      x = (Game.SpriteWidth[o.Graphic])/2 + o.X;
      y = o.Y - (Game.SpriteHeight[o.Graphic]/2);
      //_DrawSpot(x, y, o.Name);
      _DrawSpot(x, y, "");
    }
  }

  // hotspots
  _SearchHotspots();
  last_room = player.Room;
  for (i = 1; i < 30; i++) {
    if (_hi[i].there) {
      x = (_hi[i].minx+_hi[i].maxx)/2;
      y = (_hi[i].miny+_hi[i].maxy)/2;
      String name = hotspot[i].Name;
      #ifdef __VERB_GUI_MODULE__
      int pos = name.IndexOf(">");
      if (pos > -1) name = name.Truncate(pos);
      #endif
      //_DrawSpot(x, y, name);
      _DrawSpot(x, y, "");
    }
  }
  
  for (i = 0; i < Game.CharacterCount; i++) {
    Character* c = character[i];
    if (c != player && c.Room == player.Room) {
      ViewFrame* vf = Game.GetViewFrame(c.View, c.Loop, c.Frame);
      x = c.x;
      y = c.y - c.z - Game.SpriteHeight[vf.Graphic] / 2;
      //_DrawSpot(x, y, c.Name);
      _DrawSpot(x, y, "");
    }
  }
}

FontType normalfont;

DynamicSprite* ds;
DrawingSurface* backup;

function _Prepare() {
  DrawingSurface* tmp = Room.GetDrawingSurfaceForBackground();
  backup = tmp.CreateCopy();
  PauseGame();

  normalfont=Game.NormalFont;
  Game.NormalFont=_showhotspots_font;

  ds = DynamicSprite.CreateFromScreenShot();
  
  // hide visible objects
  Object*o;
  int i=0;
  while(i<Room.ObjectCount) {
    o=object[i];
    ovis[i]=false; // store which objects need to be turned visible again
    if (o.Visible) {
      // needs to be merged into background, then turned off
      ovis[i]=true;
      o.Visible=false;
    }
    i++;
  }

  // hide visible characters
  Character*c;
  ViewFrame*vf;
  i=0;
  while(i<Game.CharacterCount) {
    c=character[i];
    cvis[i]=false; // store which objects need to be turned visible again
    if (c.Room == player.Room && c.on) {
      // needs to be merged into background, then turned off
      cvis[i]=true;
      c.on=false;
    }
    i++;
  }

  tmp.DrawImage(Game.Camera.X, Game.Camera.Y, ds.Graphic);
}

function _CleanUp() {
  int i = 0;
  while(i < Room.ObjectCount) {
    if (ovis[i]) object[i].Visible=true;
    i++;
  }
  i = 0;
  while(i < Game.CharacterCount) {
    if (cvis[i]) character[i].on = true;
    i++;
  }
  Game.NormalFont = normalfont;
  UnPauseGame();
  DrawingSurface* tmp = Room.GetDrawingSurfaceForBackground();
  tmp.DrawSurface(backup);
  tmp.Release();
}

function on_key_press(int keycode) {
  if (!_showhotspots_enabled) return;
  if (keycode!=_showhotspots_key) return;
  _Prepare();  
  _ShowHotspots();
  // wait for release of key
  bool wait=true;
  while(wait) {
    if (!IsKeyPressed(_showhotspots_key)) wait=false;
    Wait(1);
  }
  _CleanUp();
}
