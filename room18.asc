#region Room

/****************************
*   Room Functions
****************************/

function room_Load()
{
  oComputer.SetView(VCOMPUTERMONITOR, 0, 0);
  oComputer.Animate(0, 9, eRepeat, eNoBlock);
  oPerpetuumMobile.SetView(VPERPETUUMMOBILE, 0, 0);
  oPerpetuumMobile.Animate(0, 7, eRepeat, eNoBlock);
}

function room_FirstLoad()
{
  aEtirwer__Looped_.Play();
  cBernard.AddInventory(iHatchOpener);
}

function room_AfterFadeIn()
{

}

function room_Leave()
{

}

function room_RepExec()
{

}

#endregion

#region Door

/****************************
*   Door-Hotspot-Functions
***************************/

function hDoorBernardsRoom_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Doors.AnyClick(BernBernardsRoom, oDoorBernardsRoom.ID, 40, 120, eDirectionLeft, BernHallSecondFloor, 280, 120, eDirectionLeft) == 0) Verbs.Unhandled();
}

#endregion

#region Drawers

function SetDrawerState()
{
  hDrawerLT.Enabled = !oDrawerLT.Visible;
  oDrawerLT.Clickable = oDrawerLT.Visible;
  
  hDrawerLM.Enabled = !oDrawerLM.Visible;
  oDrawerLM.Clickable = oDrawerLM.Visible;
  
  hDrawerLB.Enabled = !oDrawerLB.Visible;
  oDrawerLB.Clickable = oDrawerLB.Visible;
  
  hDrawerRT.Enabled = !oDrawerRT.Visible;
  oDrawerRT.Clickable = oDrawerRT.Visible;
  
  hDrawerRM.Enabled = !oDrawerRM.Visible;
  oDrawerRM.Clickable = oDrawerRM.Visible;
  
  hDrawerRB.Enabled = !oDrawerRB.Visible;
  oDrawerRB.Clickable = oDrawerRB.Visible;
}

function hDrawerLT_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(90, 120, eDirectionUp))
			Wait(5);
	{
    if (Verbs.UsedAction(eGA_WalkTo))
		{
      //Wait(5);
    }
		else if (Verbs.UsedAction(eGA_LookAt))
		{
      Wait(5);
      if (oDrawerLT.Visible == false)
      {
        player.Say("Eine praktische Aufbewahrungsmöglichkeit.");
      }
      else
      {
        player.Say("Da ist nichts drinnen was ich momentan brauche.");
      }
    }
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			player.Say("Die möchte ich nicht mitnehmen.");
		}
		else if (Verbs.UsedAction(eGA_Use))
		{
      player.Say("Sie geht auf oder zu.");
		}
    else if (Verbs.UsedAction(eGA_Open) || Verbs.UsedAction(eGA_Pull))
		{
      if(oDrawerLT.Visible == false)
      {
        aDrawerOpen.Play();
        oDrawerLT.Visible = true;
        oDrawerLM.Visible = false;
        oDrawerLB.Visible = false;
      }
      else
      {
        player.Say("Die ist schon offen.");
      }
		}
   else if (Verbs.UsedAction(eGA_Close))
		{
      if(oDrawerLT.Visible == false)
      {
        player.Say("Die ist schon zu.");
      }
      else
      {
        aDrawerClose.Play();
        oDrawerLT.Visible = false;
      }
		}
    else if (Verbs.UsedAction(eGA_Push))
		{
      if(oDrawerLT.Visible == false)
      {
        player.Say("Ich kann sie nicht weiter rein drücken.");
      }
      else
      {
        aDrawerClose.Play();
        oDrawerLT.Visible = false;
      }
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
      player.Say("Das kann ich hier nicht benutzen.");
		}
		else Verbs.Unhandled();
  }
  SetDrawerState();
}

function hDrawerLM_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(90, 120, eDirectionUp))
			Wait(5);
	{
    if (Verbs.UsedAction(eGA_WalkTo))
		{
      //Wait(5);
    }
		else if (Verbs.UsedAction(eGA_LookAt))
		{
      Wait(5);
      if (oDrawerLM.Visible == false)
      {
        player.Say("Eine praktische Aufbewahrungsmöglichkeit.");
      }
      else
      {
        player.Say("Da ist nichts drinnen was ich momentan brauche.");
      }
    }
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			player.Say("Die möchte ich nicht mitnehmen.");
		}
		else if (Verbs.UsedAction(eGA_Use))
		{
      player.Say("Sie geht auf oder zu.");
		}
    else if (Verbs.UsedAction(eGA_Open) || Verbs.UsedAction(eGA_Pull))
		{
      if(oDrawerLM.Visible == false)
      {
        aDrawerOpen.Play();
        oDrawerLT.Visible = false;
        oDrawerLM.Visible = true;
        oDrawerLB.Visible = false;
      }
      else
      {
        player.Say("Die ist schon offen.");
      }
		}
   else if (Verbs.UsedAction(eGA_Close))
		{
      if(oDrawerLM.Visible == false)
      {
        player.Say("Die ist schon zu.");
      }
      else
      {
        aDrawerClose.Play();
        oDrawerLM.Visible = false;
      }
		}
    else if (Verbs.UsedAction(eGA_Push))
		{
      if(oDrawerLM.Visible == false)
      {
        player.Say("Ich kann sie nicht weiter reindrücken.");
      }
      else
      {
        aDrawerClose.Play();
        oDrawerLM.Visible = false;
      }
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
      player.Say("Das kann ich hier nicht benutzen.");
		}
		else Verbs.Unhandled();
  }
  SetDrawerState();
}

function hDrawerLB_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(90, 120, eDirectionUp))
			Wait(5);
	{
    if (Verbs.UsedAction(eGA_WalkTo))
		{
      //Wait(5);
    }
		else if (Verbs.UsedAction(eGA_LookAt))
		{
      Wait(5);
      if (oDrawerLB.Visible == false)
      {
        player.Say("Eine praktische Aufbewahrungsmöglichkeit.");
      }
      else
      {
        player.Say("Da ist nichts drinnen was ich momentan brauche.");
      }
    }
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			player.Say("Die möchte ich nicht mitnehmen.");
		}
		else if (Verbs.UsedAction(eGA_Use))
		{
      player.Say("Sie geht auf oder zu.");
		}
    else if (Verbs.UsedAction(eGA_Open) || Verbs.UsedAction(eGA_Pull))
		{
      if(oDrawerLB.Visible == false)
      {
        aDrawerOpen.Play();
        oDrawerLT.Visible = false;
        oDrawerLM.Visible = false;
        oDrawerLB.Visible = true;
      }
      else
      {
        player.Say("Die ist schon offen.");
      }
		}
   else if (Verbs.UsedAction(eGA_Close))
		{
      if(oDrawerLB.Visible == false)
      {
        player.Say("Die ist schon zu.");
      }
      else
      {
        aDrawerClose.Play();
        oDrawerLB.Visible = false;
      }
		}
    else if (Verbs.UsedAction(eGA_Push))
		{
      if(oDrawerLB.Visible == false)
      {
        player.Say("Ich kann sie nicht weiter reindrücken.");
      }
      else
      {
        aDrawerClose.Play();
        oDrawerLB.Visible = false;
      }
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
      player.Say("Das kann ich hier nicht benutzen.");
		}
		else Verbs.Unhandled();
  }
  SetDrawerState();
}

function hDrawerRT_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(110, 120, eDirectionUp))
			Wait(5);
	{
    if (Verbs.UsedAction(eGA_WalkTo))
		{
      //Wait(5);
    }
		else if (Verbs.UsedAction(eGA_LookAt))
		{
      Wait(5);
      if (oDrawerRT.Visible == false)
      {
        player.Say("Eine praktische Aufbewahrungsmöglichkeit.");
      }
      else
      {
        player.Say("Da ist nichts drinnen was ich momentan brauche.");
      }
    }
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			player.Say("Die möchte ich nicht mitnehmen.");
		}
		else if (Verbs.UsedAction(eGA_Use))
		{
      player.Say("Sie geht auf oder zu.");
		}
    else if (Verbs.UsedAction(eGA_Open) || Verbs.UsedAction(eGA_Pull))
		{
      if(oDrawerRT.Visible == false)
      {
        aDrawerOpen.Play();
        oDrawerRT.Visible = true;
        oDrawerRM.Visible = false;
        oDrawerRB.Visible = false;
      }
      else
      {
        player.Say("Die ist schon offen.");
      }
		}
   else if (Verbs.UsedAction(eGA_Close))
		{
      if(oDrawerRT.Visible == false)
      {
        player.Say("Die ist schon zu.");
      }
      else
      {
        aDrawerClose.Play();
        oDrawerRT.Visible = false;
      }
		}
    else if (Verbs.UsedAction(eGA_Push))
		{
      if(oDrawerRT.Visible == false)
      {
        player.Say("Ich kann sie nicht weiter reindrücken.");
      }
      else
      {
        aDrawerClose.Play();
        oDrawerRT.Visible = false;
      }
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
      player.Say("Das kann ich hier nicht benutzen.");
		}
		else Verbs.Unhandled();
  }
  SetDrawerState();
}

function hDrawerRM_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(110, 120, eDirectionUp))
			Wait(5);
	{
    if (Verbs.UsedAction(eGA_WalkTo))
		{
      //Wait(5);
    }
		else if (Verbs.UsedAction(eGA_LookAt))
		{
      Wait(5);
      if (oDrawerRM.Visible == false)
      {
        player.Say("Eine praktische Aufbewahrungsmöglichkeit.");
      }
      else
      {
        player.Say("Da ist nichts drinnen was ich momentan brauche.");
      }
    }
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			player.Say("Die möchte ich nicht mitnehmen.");
		}
		else if (Verbs.UsedAction(eGA_Use))
		{
      player.Say("Sie geht auf oder zu.");
		}
    else if (Verbs.UsedAction(eGA_Open) || Verbs.UsedAction(eGA_Pull))
		{
      if(oDrawerRM.Visible == false)
      {
        aDrawerOpen.Play();
        oDrawerRT.Visible = false;
        oDrawerRM.Visible = true;
        oDrawerRB.Visible = false;
      }
      else
      {
        player.Say("Die ist schon offen.");
      }
		}
   else if (Verbs.UsedAction(eGA_Close))
		{
      if(oDrawerRM.Visible == false)
      {
        player.Say("Die ist schon zu.");
      }
      else
      {
        aDrawerClose.Play();
        oDrawerRM.Visible = false;
      }
		}
    else if (Verbs.UsedAction(eGA_Push))
		{
      if(oDrawerRM.Visible == false)
      {
        player.Say("Ich kann sie nicht weiter reindrücken.");
      }
      else
      {
        aDrawerClose.Play();
        oDrawerRM.Visible = false;
      }
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
      player.Say("Das kann ich hier nicht benutzen.");
		}
		else Verbs.Unhandled();
  }
  SetDrawerState();
}

function hDrawerRB_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(110, 120, eDirectionUp))
			Wait(5);
	{
    if (Verbs.UsedAction(eGA_WalkTo))
		{
      //Wait(5);
    }
		else if (Verbs.UsedAction(eGA_LookAt))
		{
      Wait(5);
      if (oDrawerRB.Visible == false)
      {
        player.Say("Eine praktische Aufbewahrungsmöglichkeit.");
      }
      else
      {
        player.Say("Da ist nichts drinnen was ich momentan brauche.");
      }
    }
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			player.Say("Die möchte ich nicht mitnehmen.");
		}
		else if (Verbs.UsedAction(eGA_Use))
		{
      player.Say("Sie geht auf oder zu.");
		}
    else if (Verbs.UsedAction(eGA_Open) || Verbs.UsedAction(eGA_Pull))
		{
      if(oDrawerRB.Visible == false)
      {
        aDrawerOpen.Play();
        oDrawerRT.Visible = false;
        oDrawerRM.Visible = false;
        oDrawerRB.Visible = true;
      }
      else
      {
        player.Say("Die ist schon offen.");
      }
		}
   else if (Verbs.UsedAction(eGA_Close))
		{
      if(oDrawerRB.Visible == false)
      {
        player.Say("Die ist schon zu.");
      }
      else
      {
        aDrawerClose.Play();
        oDrawerRB.Visible = false;
      }
		}
    else if (Verbs.UsedAction(eGA_Push))
		{
      if(oDrawerRB.Visible == false)
      {
        player.Say("Ich kann sie nicht weiter reindrücken.");
      }
      else
      {
        aDrawerClose.Play();
        oDrawerRB.Visible = false;
      }
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
      player.Say("Das kann ich hier nicht benutzen.");
		}
		else Verbs.Unhandled();
  }
  SetDrawerState();
}

#endregion

#region Hotspots

/****************************
*   Hotspot Functions
****************************/

function hCertificate_AnyClick()
{
  if (Verbs.AnyClickMove(175, 120, eDirectionUp))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("'Gewinner des Eierkopfpreises.'");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Ich lass es, wo es ist.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Ich will es nicht beschädigen.");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Ich kann es nicht öffnen.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Ich kann es nicht schließen.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Ich lass es, wo es ist.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Ich lass es, wo es ist.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das passt hier nicht.");
    }
    else Verbs.Unhandled();
  }
}

function hBooks_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(220, 120, eDirectionUp))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Meine Lieblingsbücher.");
      Wait(10);
      player.FaceDirection(eDirectionDown);
      player.Say("Von Physik bis Astronomie ist alles dabei.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Oh, die kenne ich schon auswendig.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Ich kenne alle Bücher auswendig.");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Ich will jetzt nicht lesen.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Geschlossene Lektüre.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Ich lass sie, wo sie sind.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Ich lass sie, wo sie sind.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das kann ich hier nicht benutzen.");
    }
    else Verbs.Unhandled();
  }
}

function hChuck_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(75, 120, eDirectionUp))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Ein 'Geschenk' von Dr. Fred.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Die bleibt da stehen.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Ich vergreife mich nicht an wehrlosen Pflanzen.");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Es ist nur eine Pflanze.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Es ist nur eine Pflanze.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Ich lass sie, wo sie ist.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Ich lass sie, wo sie ist.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das kann ich hier nicht benutzen.");
    }
    else Verbs.Unhandled();
  }
}

function hBed_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(220, 120, eDirectionUp))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Die Bettdecke liegt mathematisch genau ...");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Das bleibt da stehen.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Noch zu viele Photonen im Raum.");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Die Decke liegt gerade so schön.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Das geht nicht.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Das bleibt da stehen.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Das bleibt da stehen.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das kann ich hier nicht benutzen.");
    }
    else Verbs.Unhandled();
  }
}

function hWindow01_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(120, 120, eDirectionUp))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Ich kann Hoagies Haus sehen.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Ich brauche jetzt kein Fenster.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Soll ich es öffnen oder schließen?");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Das ist kein echtes Fenster.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Das ist schon zu.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Es bewegt sich nicht.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Es bewegt sich nicht.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das kann ich hier nicht benutzen.");
    }
    else Verbs.Unhandled();
  }
}

function hWindow02_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(275, 120, eDirectionRight))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Ein guter Tag für die Photosynthese.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Ich brauche jetzt kein Fenster.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Soll ich es öffnen oder schließen?");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Nein. Ich könnte herausfallen.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Das ist schon zu.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Es bewegt sich nicht.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Es bewegt sich nicht.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das kann ich hier nicht benutzen.");
    }
    else Verbs.Unhandled();
  }
}

#endregion

#region Objects

/****************************
*   Object Functions
****************************/

function oPerpetuumMobile_AnyClick(Object *theObject, CursorMode mode)
{

  if (Verbs.AnyClickMove(175, 120, eDirectionUp))
	{
		if (Verbs.UsedAction(eGA_WalkTo))
		{
		//	Wait(5);
		}
		else if (Verbs.UsedAction(eGA_LookAt))
		{
      Wait(5);
      player.Say("Meine Arbeit für Jugend forscht.");
      player.FaceDirection(eDirectionDown);
      Wait(5);
      player.Say("Es hört einfach nicht auf, sich zu drehen.");
		}
		else if (Verbs.UsedAction(eGA_PickUp))
		{
      Wait(5);      
      player.Say("Im Moment brauche ich keine unerschöpfliche Energiequelle.");
      player.FaceDirection(eDirectionDown);
      Wait(5);
      player.Say("Vielleicht später.");
		}
		else if (Verbs.UsedAction(eGA_Use))
		{
      Wait(5);      
      player.Say("Ich möchte im Moment nicht.");
    }
		else if (Verbs.UsedAction(eGA_Open))
		{
      Wait(5);      
      player.Say("Zusammengebaut ist es mir lieber.");
    }
    else if (Verbs.UsedAction(eGA_Close))
		{
      Wait(5);      
      player.Say("Das geht nicht.");
    }
		else if (Verbs.UsedAction(eGA_Pull))
		{
      Wait(5);      
      player.Say("Ich will es nicht verschieben.");
    }
    else if (Verbs.UsedAction(eGA_Push))
		{
			Wait(5);
      player.Say("Ich will es nicht verschieben.");
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
			Wait(5);
      player.Say("Das passt hier nicht.");
    }
		else Verbs.Unhandled();
  }
}

function oComputer_AnyClick(Object *theObject, CursorMode mode)
{
  if (Verbs.AnyClickMove(90, 120, eDirectionUp))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Wir beide haben schon eine Menge Adventures erlebt!");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Das ist doch kein Laptop.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Der funktioniert im Moment nicht.");
      player.FaceDirection(eDirectionDown);
      Wait(5);
      player.Say("Ich habe Doors 11 installiert.");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Das mache ich nicht.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Der hat ein geschlossenes Gehäuse.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Ich will ihn nicht verschieben.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Ich will ihn nicht verschieben.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das passt hier nicht.");
    }
    else Verbs.Unhandled();
  }
}

function oPillow_AnyClick(Object *theObject, CursorMode mode)
{
  if (Verbs.AnyClickMove(240, 120, eDirectionUp))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Mein flauschiges Daunenkissen.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      oPillow.Visible = false;
      Wait(5);
      aPickUp.Play(); 
      Wait(5);
      player.AddInventory(iPillow);
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Ich möchte im Moment nicht.");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Das mache ich jetzt nicht.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Das geht nicht.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Ich will es nicht verschieben.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Ich will es nicht verschieben.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das passt hier nicht.");
    }
    else Verbs.Unhandled();
  }
}

#endregion


