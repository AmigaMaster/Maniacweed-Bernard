/****************************
* Custom variables
*****************************/

AudioChannel *runningWaterChannel;

#region Room

/****************************
*   Room Functions
****************************/

function room_Load()
{
  oWater.SetView(8);
  oWater.Animate(0, 0, eRepeat, eNoBlock, eForwards);
  
  if (oWater.Visible)
  {
    runningWaterChannel = aWater.Play(eAudioPriorityNormal, eRepeat);
    runningWaterChannel.SetRoomLocation(25, 95);
  }
}

function room_FirstLoad()
{

}

function room_AfterFadeIn()
{

}

function room_Leave()
{
  if (runningWaterChannel != null) runningWaterChannel.Stop();
}

function room_RepExec()
{

}

#endregion

#region Door

/****************************
*   Door Hotspot Functions
***************************/

function hDoorKitchen_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Doors.AnyClick(BernKitchen, oDoorKitchen.ID, 285, 111, eDirectionRight, BernDiningRoom, 40, 104, eDirectionRight) == 0) Verbs.Unhandled();  
}

#endregion

#region Hotspots

/****************************
*   Hotspot Functions
****************************/

function hCabinet01_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(75, 130, eDirectionUp))
	{
    if (Verbs.UsedAction(eGA_WalkTo))
		{
		//	Wait(5);
		}
		else if (Verbs.UsedAction(eGA_LookAt))
		{
			Wait(5);
      if (oCabinet01.Visible == true)
			{
        player.Say("Er ist leer.");
      }
      else
      {
        player.Say("Ein Schrank.");
      }
		}
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			Wait(5);
			player.Say("Den kann ich nicht mitnehmen.");
		}
		else if (Verbs.UsedAction(eGA_Use))
		{
			Wait(5);
      player.Say("Es geht auf oder zu.");
		}
		else if (Verbs.UsedAction(eGA_Open))
		{
			Wait(5);
      if (oCabinet01.Visible == true)
      {
        player.Say("Der ist doch schon offen.");
      }
      else
      {
        aDrawerOpen.Play();
        oCabinet01.Visible = true;
      }
		}
    		else if (Verbs.UsedAction(eGA_Close))
		{
			Wait(5);
      if (oCabinet01.Visible == true)
      {
        aDrawerClose.Play();
        oCabinet01.Visible = false;        
      }
      else
      {
        player.Say("Der ist doch zu.");        
      }
		}
		else if (Verbs.UsedAction(eGA_Pull))
		{
			Wait(5);
      player.Say("Es passiert nichts.");
		}
    else if (Verbs.UsedAction(eGA_Push))
		{
			Wait(5);
      player.Say("Es passiert nichts.");
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
			Wait(5);
			player.Say("Das kann ich hier nicht anwenden.");
		}
		else Verbs.Unhandled();
  }
}

function hCabinet02_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(203, 130, eDirectionUp))
	{
    if (Verbs.UsedAction(eGA_WalkTo))
		{
		//	Wait(5);
		}
		else if (Verbs.UsedAction(eGA_LookAt))
		{
			Wait(5);
      if (oCabinet02.Visible == true)
			{
        player.Say("Er ist leer.");
      }
      else
      {
        player.Say("Ein Schrank.");
      }
		}
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			Wait(5);
			player.Say("Den kann ich nicht mitnehmen.");
		}
		else if (Verbs.UsedAction(eGA_Use))
		{
			Wait(5);
      player.Say("Es geht auf oder zu.");
		}
		else if (Verbs.UsedAction(eGA_Open))
		{
			Wait(5);
      if (oCabinet02.Visible == true)
      {
        player.Say("Der ist doch schon offen.");
      }
      else
      {
        aDrawerOpen.Play();
        oCabinet02.Visible = true;
      }
		}
    else if (Verbs.UsedAction(eGA_Close))
		{
			Wait(5);
      if (oCabinet02.Visible == true)
      {
        aDrawerClose.Play();
        oCabinet02.Visible = false;        
      }
      else
      {
        player.Say("Der ist doch zu.");        
      }
		}
		else if (Verbs.UsedAction(eGA_Pull))
		{
			Wait(5);
      player.Say("Es passiert nichts.");
		}
    else if (Verbs.UsedAction(eGA_Push))
		{
			Wait(5);
      player.Say("Es passiert nichts.");
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
			Wait(5);
			player.Say("Das kann ich hier nicht anwenden.");
		}
		else Verbs.Unhandled();
  }
}

function hCabinet03_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(203, 130, eDirectionUp))
	{
    if (Verbs.UsedAction(eGA_WalkTo))
		{
		//	Wait(5);
		}
		else if (Verbs.UsedAction(eGA_LookAt))
		{
			Wait(5);
      if (oCabinet03.Visible == true)
			{
        player.Say("Er ist leer.");
      }
      else
      {
        player.Say("Ein Schrank.");
      }
		}
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			Wait(5);
			player.Say("Den kann ich nicht mitnehmen.");
		}
		else if (Verbs.UsedAction(eGA_Use))
		{
			Wait(5);
      player.Say("Es geht auf oder zu.");
		}
		else if (Verbs.UsedAction(eGA_Open))
		{
			Wait(5);
      if (oCabinet03.Visible == true)
      {
        player.Say("Der ist doch schon offen.");
      }
      else
      {
        aDrawerOpen.Play();
        oCabinet03.Visible = true;
      }
		}
    else if (Verbs.UsedAction(eGA_Close))
		{
			Wait(5);
      if (oCabinet03.Visible == true)
      {
        aDrawerClose.Play();
        oCabinet03.Visible = false;        
      }
      else
      {
        player.Say("Der ist doch zu.");        
      }
		}
		else if (Verbs.UsedAction(eGA_Pull))
		{
			Wait(5);
      player.Say("Es passiert nichts.");
		}
    else if (Verbs.UsedAction(eGA_Push))
		{
			Wait(5);
      player.Say("Es passiert nichts.");
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
			Wait(5);
			player.Say("Das kann ich hier nicht anwenden.");
		}
		else Verbs.Unhandled();
  }
}

function hMicrowave_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(190, 130, eDirectionUp))
	{
		if (Verbs.UsedAction(eGA_WalkTo))
		{
		//	Wait(5);
		}
		else if (Verbs.UsedAction(eGA_LookAt))
		{
			Wait(5);
			player.Say("Eine Mikrowelle.");
		}
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			Wait(5);	
			player.Say("Die bleibt hier stehen.");
		}
		else if (Verbs.UsedAction(eGA_Use))
		{
			Wait(5);
      if (oMicrowave.Visible == true)
      {
        player.Say("Ich sollte sie zuerst schließen.");
      }
      else
      {
        player.Say("Es ist nichts drinnen.");
      }
		}
		else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);      
      if (oMicrowave.Visible == true)
      {      
        player.Say("Ist doch schon offen.");
      }
      else
      {
        aMicrowaveOpen.Play();
        oMicrowave.Visible = true;
      }
    }
    else if (Verbs.UsedAction(eGA_Close))
		{
			Wait(5);		
      if (oMicrowave.Visible == true)			
      {
        aMicrowaveClose.Play();
        oMicrowave.Visible = false;
      }
      else
      {
        player.Say("Die Mikrowelle ist bereits geschlossen.");
      }
		}
		else if (Verbs.UsedAction(eGA_Pull) || Verbs.UsedAction(eGA_Push))
		{
			Wait(5);
			player.Say("Damit sie herunterfällt?");
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
			Wait(5);
			player.Say("Damit geht sie nicht auf.");
		}
		else Verbs.Unhandled();
	}
}

function hFridge_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(250, 130, eDirectionUp))
	{
		if (Verbs.UsedAction(eGA_WalkTo))
		{
		//	Wait(5);
		}
		else if (Verbs.UsedAction(eGA_LookAt))
		{
			Wait(5);
			player.Say("Ein Kühlschrank.");
		}
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			Wait(5);	
			player.Say("Den packe ich nicht ein.");
		}
		else if (Verbs.UsedAction(eGA_Use))
		{
			Wait(5);
			player.Say("Er geht auf oder zu.");
    }
		else if (Verbs.UsedAction(eGA_Open))      
    {
      Wait(5);
      if (oFridge.Visible == true)
      {
        player.Say("Das habe ich schon getan.");
      }
      else
      {
        aFridgeOpen.Play();
        oFridge.Visible = true;
      }
		}
		else if (Verbs.UsedAction(eGA_Close))
		{
			Wait(5);		
      if (oFridge.Visible == true)
      {
        aFridgeClose.Play();
        oFridge.Visible = false;
      }
      else
      {
        player.Say("Der Kühlschrank ist bereits geschlossen.");
      }
		}
		else if (Verbs.UsedAction(eGA_Pull) || Verbs.UsedAction(eGA_Push))
		{
			Wait(5);
			player.Say("Der lässt sich nicht bewegen.");
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
			Wait(5);
			player.Say("Das kann ich damit nicht benutzen.");
		}
		else Verbs.Unhandled();
	}
}

function hWallCabinet01_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(75, 130, eDirectionUp))
	{
    if (Verbs.UsedAction(eGA_WalkTo))
		{
		//	Wait(5);
		}
		else if (Verbs.UsedAction(eGA_LookAt))
		{
			Wait(5);
			if (oWallCabinet01.Visible == true)
      {
        player.Say("Leer."); 
      }
      else 
      {
        player.Say("Ein Hängeschrank.");
      }
		}
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			Wait(5);
			player.Say("Den kann ich nicht mitnehmen.");
		}
		else if (Verbs.UsedAction(eGA_Use))
		{
			Wait(5);
      player.Say("Es geht auf oder zu.");
		}
		else if (Verbs.UsedAction(eGA_Open))
		{
			Wait(5);
			if (oWallCabinet01.Visible == true)
      {      
        player.Say("Der ist doch schon offen.");
      }
      else
      {
        aDrawerOpen.Play();
        oWallCabinet01.Visible = true;        
      }
		}
    		else if (Verbs.UsedAction(eGA_Close))
		{
			Wait(5);
			if (oWallCabinet01.Visible == true)
      {      
        aDrawerClose.Play();
        oWallCabinet01.Visible = false;    
      }
      else
      {
        player.Say("Der ist doch zu.");   
      }      
		}
		else if (Verbs.UsedAction(eGA_Pull))
		{
			Wait(5);
      player.Say("Es passiert nichts.");      
		}
    else if (Verbs.UsedAction(eGA_Push))
		{
			Wait(5);
      player.Say("Es passiert nichts.");
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
			Wait(5);
			player.Say("Das kann ich hier nicht anwenden.");
		}
		else Verbs.Unhandled();
  }
}

function hWallCabinet02_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(100, 130, eDirectionUp))
	{
    if (Verbs.UsedAction(eGA_WalkTo))
		{
		//	Wait(5);
		}
		else if (Verbs.UsedAction(eGA_LookAt))
		{
			Wait(5);
			if (oWallCabinet02.Visible == true)
      {
        player.Say("Leer."); 
      }
      else 
      {
        player.Say("Ein Hängeschrank.");
      }
		}
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			Wait(5);
			player.Say("Den kann ich nicht mitnehmen.");
		}
		else if (Verbs.UsedAction(eGA_Use))
		{
			Wait(5);
      player.Say("Es geht auf oder zu.");
		}
		else if (Verbs.UsedAction(eGA_Open))
		{
			Wait(5);
			if (oWallCabinet02.Visible == true)
      {      
        player.Say("Der ist doch schon offen.");
      }
      else
      {
        aDrawerOpen.Play();
        oWallCabinet02.Visible = true;        
      }
		}
    		else if (Verbs.UsedAction(eGA_Close))
		{
			Wait(5);
			if (oWallCabinet02.Visible == true)
      {      
        aDrawerClose.Play();
        oWallCabinet02.Visible = false;    
      }
      else
      {
        player.Say("Der ist doch zu.");   
      }      
		}
		else if (Verbs.UsedAction(eGA_Pull))
		{
			Wait(5);
      player.Say("Es passiert nichts.");      
		}
    else if (Verbs.UsedAction(eGA_Push))
		{
			Wait(5);
      player.Say("Es passiert nichts.");
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
			Wait(5);
			player.Say("Das kann ich hier nicht anwenden.");
		}
		else Verbs.Unhandled();
  }
}

function hWallCabinet03_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(135, 130, eDirectionUp))
	{
    if (Verbs.UsedAction(eGA_WalkTo))
		{
		//	Wait(5);
		}
		else if (Verbs.UsedAction(eGA_LookAt))
		{
			Wait(5);
			if (oWallCabinet03.Visible == true)
      {
        player.Say("Leer."); 
      }
      else 
      {
        player.Say("Ein Hängeschrank.");
      }
		}
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			Wait(5);
			player.Say("Den kann ich nicht mitnehmen.");
		}
		else if (Verbs.UsedAction(eGA_Use))
		{
			Wait(5);
      player.Say("Es geht auf oder zu.");
		}
		else if (Verbs.UsedAction(eGA_Open))
		{
			Wait(5);
			if (oWallCabinet03.Visible == true)
      {      
        player.Say("Der ist doch schon offen.");
      }
      else
      {
        aDrawerOpen.Play();
        oWallCabinet03.Visible = true;        
      }
		}
    		else if (Verbs.UsedAction(eGA_Close))
		{
			Wait(5);
			if (oWallCabinet03.Visible == true)
      {      
        aDrawerClose.Play();
        oWallCabinet03.Visible = false;    
      }
      else
      {
        player.Say("Der ist doch zu.");   
      }      
		}
		else if (Verbs.UsedAction(eGA_Pull))
		{
			Wait(5);
      player.Say("Es passiert nichts.");      
		}
    else if (Verbs.UsedAction(eGA_Push))
		{
			Wait(5);
      player.Say("Es passiert nichts.");
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
			Wait(5);
			player.Say("Das kann ich hier nicht anwenden.");
		}
		else Verbs.Unhandled();
  }
}

function hStove_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(150, 130, eDirectionUp))
	{
		if (Verbs.UsedAction(eGA_WalkTo))
		{
		//	Wait(5);
		}
		else if (Verbs.UsedAction(eGA_LookAt))
		{
			Wait(5);
			player.Say("Ein Herd.");
		}
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			Wait(5);	
			player.Say("Der ist hier festgemacht.");
		}
		else if (Verbs.UsedAction(eGA_Use) || Verbs.UsedAction(eGA_Open))
		{
			Wait(5);		
			player.Say("Der ist hier nur zur Zierde.");
		}
		else if (Verbs.UsedAction(eGA_Close))
		{
			Wait(5);		
			player.Say("Der Ofen ist bereits geschlossen.");
		}
		else if (Verbs.UsedAction(eGA_Pull) || Verbs.UsedAction(eGA_Push))
		{
			Wait(5);
			player.Say("Da passiert nichts.");
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
			Wait(5);
			player.Say("Das macht hier kein Sinn.");
		}
		else Verbs.Unhandled();
	}
}

function hDishwasher_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(100, 130, eDirectionUp))
	{
		if (Verbs.UsedAction(eGA_WalkTo))
		{
		//	Wait(5);
		}
		else if (Verbs.UsedAction(eGA_LookAt))
		{
			Wait(5);
			player.Say("Unser Geschirrspüler.");
		}
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			Wait(5);	
			player.Say("Der ist hier festgemacht.");
		}
		else if (Verbs.UsedAction(eGA_Use) || Verbs.UsedAction(eGA_Open))
		{
			Wait(5);		
			player.Say("Der ist hier nur zur Zierde.");
		}
		else if (Verbs.UsedAction(eGA_Close))
		{
			Wait(5);		
			player.Say("Der Geschirrspüler ist bereits geschlossen.");
		}
		else if (Verbs.UsedAction(eGA_Pull) || Verbs.UsedAction(eGA_Push))
		{
			Wait(5);
			player.Say("Da passiert nichts.");
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
			Wait(5);
			player.Say("Das macht hier kein Sinn.");
		}
		else Verbs.Unhandled();
	}
}

function hWindow_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(60, 135, eDirectionLeft))
	{
    if (Verbs.UsedAction(eGA_WalkTo))
		{
		//	Wait(5);
		}
		else if (Verbs.UsedAction(eGA_LookAt))
		{
			Wait(5);
			player.Say("Ich kann nach draußen sehen.");
		}
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			Wait(5);
			player.Say("Ich brauche jetzt kein Fenster.");
		}
		else if (Verbs.UsedAction(eGA_Use))
		{
			Wait(5);
      player.Say("Ich möchte da nicht rausklettern.");
		}
		else if (Verbs.UsedAction(eGA_Open))
		{
			Wait(5);
      player.Say("Es klemmt.");
		}
    		else if (Verbs.UsedAction(eGA_Close))
		{
			Wait(5);
      player.Say("Es ist doch zu.");
		}
		else if (Verbs.UsedAction(eGA_Pull))
		{
			Wait(5);
      player.Say("Es lässt sich nicht bewegen.");
		}
    else if (Verbs.UsedAction(eGA_Push))
		{
			Wait(5);
      player.Say("Es lässt sich nicht bewegen.");
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
			Wait(5);
			player.Say("Damit geht das Fenster nicht auf.");
		}
		else Verbs.Unhandled();
  }
}

function hDrawer01_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(190, 130, eDirectionUp))
	{
    if (Verbs.UsedAction(eGA_WalkTo))
		{
		//	Wait(5);
		}
		else if (Verbs.UsedAction(eGA_LookAt))
		{
			Wait(5);
			if (oDrawer01.Visible == true)
      {
        player.Say("Leer.");
      }
      else
      {
        player.Say("Eine Schublade.");
      }
		}
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			Wait(5);
			player.Say("Die möchte ich nicht mitnehmen.");
		}
		else if (Verbs.UsedAction(eGA_Use))
		{
			Wait(5);
      player.Say("Es geht auf oder zu.");
		}
		else if (Verbs.UsedAction(eGA_Open))
		{
			Wait(5);
      if (oDrawer01.Visible == true)
      {
        player.Say("Sie ist doch schon offen.");
      }
      else
      {
        aDrawerOpen.Play();
        oDrawer01.Visible = true;
      }
		}
    else if (Verbs.UsedAction(eGA_Close))
		{
			Wait(5);
      if (oDrawer01.Visible == true)      
      {
        aDrawerClose.Play();
        oDrawer01.Visible = false;
      }
      else
      {
        player.Say("Sie ist doch zu.");      
      }
		}
		else if (Verbs.UsedAction(eGA_Pull))
		{
			Wait(5);
      if (oDrawer01.Visible == true)   
      {
        player.Say("Ich will sie nicht raus reissen.");
      }
      else
      {
        aDrawerOpen.Play();
        oDrawer01.Visible = true;
      }
		}
    else if (Verbs.UsedAction(eGA_Push))
		{
			Wait(5);
      if (oDrawer01.Visible == true)   
      {
        aDrawerClose.Play();
        oDrawer01.Visible = false;
      }
      else
      {
        player.Say("Ich kann sie nicht weiter reindrücken.");        
      }
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
			Wait(5);
			player.Say("Ich sollte die Schublade erst mal öffnen.");
		}
		else Verbs.Unhandled();
  }
}

function hDrawer02_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(213, 130, eDirectionUp))
	{
    if (Verbs.UsedAction(eGA_WalkTo))
		{
		//	Wait(5);
		}
		else if (Verbs.UsedAction(eGA_LookAt))
		{
			Wait(5);
			if (oDrawer02.Visible == true)
      {
        player.Say("Leer.");
      }
      else
      {
        player.Say("Eine Schublade.");
      }
		}
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			Wait(5);
			player.Say("Die möchte ich nicht mitnehmen.");
		}
		else if (Verbs.UsedAction(eGA_Use))
		{
			Wait(5);
      player.Say("Es geht auf oder zu.");
		}
		else if (Verbs.UsedAction(eGA_Open))
		{
			Wait(5);
      if (oDrawer02.Visible == true)
      {
        player.Say("Sie ist doch schon offen.");
      }
      else
      {
        aDrawerOpen.Play();
        oDrawer02.Visible = true;
      }
		}
    else if (Verbs.UsedAction(eGA_Close))
		{
			Wait(5);
      if (oDrawer02.Visible == true)      
      {
        aDrawerClose.Play();
        oDrawer02.Visible = false;
      }
      else
      {
        player.Say("Sie ist doch zu.");      
      }
		}
		else if (Verbs.UsedAction(eGA_Pull))
		{
			Wait(5);
      if (oDrawer02.Visible == true)   
      {
        player.Say("Ich will sie nicht rausreißen.");
      }
      else
      {
        aDrawerOpen.Play();
        oDrawer02.Visible = true;
      }
		}
    else if (Verbs.UsedAction(eGA_Push))
		{
			Wait(5);
      if (oDrawer02.Visible == true)   
      {
        aDrawerClose.Play();
        oDrawer02.Visible = false;
      }
      else
      {
        player.Say("Ich kann sie nicht weiter reindrücken.");        
      }
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
			Wait(5);
			player.Say("Ich sollte die Schublade erst mal öffnen.");
		}
		else Verbs.Unhandled();
  }
}

function hDrawer03_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(71, 130, eDirectionUp))
	{
    if (Verbs.UsedAction(eGA_WalkTo))
		{
		//	Wait(5);
		}
		else if (Verbs.UsedAction(eGA_LookAt))
		{
			Wait(5);
			if (oDrawer03.Visible == true)
      {
        player.Say("Leer.");
      }
      else
      {
        player.Say("Eine Schublade.");
      }
		}
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			Wait(5);
			player.Say("Die möchte ich nicht mitnehmen.");
		}
		else if (Verbs.UsedAction(eGA_Use))
		{
			Wait(5);
      player.Say("Es geht auf oder zu.");
		}
		else if (Verbs.UsedAction(eGA_Open))
		{
			Wait(5);
      if (oDrawer03.Visible == true)
      {
        player.Say("Sie ist doch schon offen.");
      }
      else
      {
        aDrawerOpen.Play();
        oDrawer03.Visible = true;
      }
		}
    else if (Verbs.UsedAction(eGA_Close))
		{
			Wait(5);
      if (oDrawer03.Visible == true)      
      {
        aDrawerClose.Play();
        oDrawer03.Visible = false;
      }
      else
      {
        player.Say("Sie ist doch zu.");      
      }
		}
		else if (Verbs.UsedAction(eGA_Pull))
		{
			Wait(5);
      if (oDrawer03.Visible == true)   
      {
        player.Say("Ich will sie nicht rausreißen.");
      }
      else
      {
        aDrawerOpen.Play();
        oDrawer03.Visible = true;
      }
		}
    else if (Verbs.UsedAction(eGA_Push))
		{
			Wait(5);
      if (oDrawer03.Visible == true)   
      {
        aDrawerClose.Play();
        oDrawer03.Visible = false;
      }
      else
      {
        player.Say("Ich kann sie nicht weiter reindrücken.");        
      }
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
			Wait(5);
			player.Say("Ich sollte die Schublade erst mal öffnen.");
		}
		else Verbs.Unhandled();
  }
}

function hSink_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(50, 140, eDirectionLeft))
	{
		if (Verbs.UsedAction(eGA_WalkTo))
		{
		//	Wait(5);
		}
		else if (Verbs.UsedAction(eGA_LookAt))
		{
			Wait(5);
      player.Say("Eine Spüle.");
		}
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			Wait(5);
			player.Say("Warum?");
		}
		else if (Verbs.UsedAction(eGA_Use))
		{
			Wait(5);	
			player.Say("Ich muss mir jetzt nicht die Hände waschen.");
		}
		else if (Verbs.UsedAction(eGA_Open))
		{
			Wait(5);	
			player.Say("Dazu gibt es keinen Grund.");
		}
		else if (Verbs.UsedAction(eGA_Close))
		{
			Wait(5);	
			player.Say("Der Abfluss ist bereits montiert.");
		}
		else if (Verbs.UsedAction(eGA_Pull) || Verbs.UsedAction(eGA_Push))
		{
			Wait(5);	
			player.Say("Fällt dir nichts besseres ein?");
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
			Wait(5);
			player.Say("Damit würde ich die Spüle verstopfen.");
		}
    else Verbs.Unhandled();
	}
}

function hFaucet_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(50, 140, eDirectionLeft))
	{
		if (Verbs.UsedAction(eGA_WalkTo))
		{
		//	Wait(5);
		}
		else if (Verbs.UsedAction(eGA_LookAt))
		{
			Wait(5);
			player.Say("Ein Wasserhahn.");
		}
		else if (Verbs.UsedAction(eGA_PickUp))
		{
			Wait(5);
			player.Say("Der ist festgemacht.");
		}
		else if (Verbs.UsedAction(eGA_Use))
		{
			Wait(5);
			if (oWater.Visible == true)
			{
        oWater.Visible = false;
				aWater.Stop();
			}
			else
			{
				oWater.Visible = true;
				runningWaterChannel = aWater.Play(eAudioPriorityNormal, eRepeat);
        runningWaterChannel.SetRoomLocation(25, 95);
			}
    }
		else if (Verbs.UsedAction(eGA_Open))
		{
      Wait(5);
			if (oWater.Visible == true)
			{
				player.Say("Das Wasser läuft bereits.");
			}
			else
      {
				oWater.Visible = true;
				runningWaterChannel = aWater.Play(eAudioPriorityNormal, eRepeat);
        runningWaterChannel.SetRoomLocation(25, 95);
      }
		}
		else if (Verbs.UsedAction(eGA_Close))
		{
			Wait(5);
      if (oWater.Visible == true)
			{
        oWater.Visible = false;
				aWater.Stop();
      }
      else
			{
				player.Say("Der Wasserhahn ist doch schon zu.");
			}
		}
		else if (Verbs.UsedAction(eGA_Pull))
		{
			Wait(5);
			player.Say("Es bewegt sich nichts.");
		}
		else if (Verbs.UsedAction(eGA_Push))
		{
			Wait(5);
			player.Say("Es bewegt sich nichts.");
		}
    else if (Verbs.UsedAction(eGA_UseInv))
		{
			Wait(5);
			player.Say("Das kann ich damit nicht benutzen.");
		}
    else Verbs.Unhandled();
	}
}

#endregion

#region Objects

/****************************
*   Object Functions
****************************/

#endregion
