#region Room

/****************************
*   Room Functions
****************************/

function room_Load()
{

}

function room_FirstLoad()
{
  Doors.SetDoorState(BernGarage, 2); //Tür ist verschlossen
}

function room_AfterFadeIn()
{

}

function room_Leave()
{

}

function room_RepExec()
{

}

#endregion

#region Door

/****************************
*   Door Hotspot Functions
***************************/

function hDoorInGarage_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Doors.AnyClick(BernGarage, oDoorInGarage.ID, 185, 107, eDirectionUp, BernGarage, 185, 107, eDirectionDown) == 0) Verbs.Unhandled();
}

#endregion

#region Hotspots

/****************************
*   Hotspot Functions
****************************/

function hGaragedoor_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(50, 117, eDirectionLeft))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      if (oGarageDoor.Visible == true)
      {
        Wait(5);
        player.ChangeRoom(BernOutside, 445, 105, eDirectionDown);
      }
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Da geht es nach draussen.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Das kann ich nicht mitnehmen.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Womit?");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      if (oGarageDoor.Visible == true)
      {
        player.Say("Das Tor ist bereits offen.");
      }
      else
      {
        aGarageDoorOpen.Play();
        oGarageDoor.Visible = true;
        oRod.Visible = true;
      }
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      if (oGarageDoor.Visible == false)
      {
        player.Say("Das Tor ist geschlossen.");
      }
      else
      {
        aGarageDoorClose.Play();
        oGarageDoor.Visible = false;
        oRod.Visible = false;
      }
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Das geht nicht.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Das geht nicht.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Damit bekomme ich das Tor nicht auf.");
    }
    else Verbs.Unhandled();
  }
}

function hRedThread_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(85, 107, eDirectionLeft))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Damit kann man die Garage öffnen.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Der ist da festgebunden.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      if (oGarageDoor.Visible == false)
      {
        aGarageDoorOpen.Play();
        oGarageDoor.Visible = true;
        oRod.Visible = true;
      }
      else
      {
        aGarageDoorClose.Play();
        oGarageDoor.Visible = false;
        oRod.Visible = false;
      }
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Ein rotes Seil kann ich nicht öffen.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Ein rotes Seil kann ich nicht schliessen.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      if (oGarageDoor.Visible == false)
      {
        aGarageDoorOpen.Play();
        oGarageDoor.Visible = true;
        oRod.Visible = true;
      }
      else
      {
        aGarageDoorClose.Play();
        oGarageDoor.Visible = false;
        oRod.Visible = false;
      }
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Ein rotes Seil kann ich nicht drücken.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das kann ich hier nicht benutzen.");
    }
    else Verbs.Unhandled();
  }
}

function hShelf_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(255, 112, eDirectionUp))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Ein Regal.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Das ist viel zu schwer.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Ich möchte da nichts rein tun.");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Das lässt sich nicht öffnen.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Da ist nichts zum Schließen dran.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Das schaffe ich so nicht.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Das schaffe ich so nicht.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das will ich da nicht rein tun.");
    }
    else Verbs.Unhandled();
  }
}

function hPipe_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(275, 112, eDirectionRight))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Ein Rohr.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Das ist viel zu schwer.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Ich will es nicht beschädigen.");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Das lässt sich nicht öffnen.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Da ist nichts zum Schließen dran.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Das schaffe ich so nicht.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Das schaffe ich so nicht.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Ich will es nicht beschädigen.");
    }
    else Verbs.Unhandled();
  }
}

#endregion

#region Objects

/****************************
*   Object Functions
****************************/

function oPainting_AnyClick(Object *theObject, CursorMode mode)
{
  if (Verbs.AnyClickMove(235, 112, eDirectionUp))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Ein Topf mit Farbe.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Ich brauche jetzt keine Farbe.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Ich möchte jetzt nichts streichen.");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Ich will sie nicht öffnen.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Geschlossen.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Ich lasse die Farbe da stehen.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Ich lasse die Farbe da stehen.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das sollte ich tunlichst vermeiden.");
    }
    else Verbs.Unhandled();
  }
}

function oCan_AnyClick(Object *theObject, CursorMode mode)
{
  if (Verbs.AnyClickMove(255, 112, eDirectionUp))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Eine Dose.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Ich will jetzt nicht.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Ich möchte da nichts rein tun.");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Das lässt sich nicht öffnen.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Die Dose ist schon zu.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Ich will sie nicht bewegen.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Ich will sie nicht bewegen.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das will ich da nicht rein tun.");
    }
    else Verbs.Unhandled();
  }
}

function oGlass_AnyClick(Object *theObject, CursorMode mode)
{
  if (Verbs.AnyClickMove(270, 112, eDirectionUp))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Ein Glas.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Das sollte ich besser nicht tun.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Ich möchte da nichts rein tun.");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Es lässt sich nicht öffnen.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Das Glas sieht zu aus.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Ich sollte das Glas da stehen lassen.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Ich sollte das Glas da stehen lassen.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das kann ich hier nicht benutzen.");
    }
    else Verbs.Unhandled();
  }
}

#endregion
