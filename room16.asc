/****************************
* Custom variables
*****************************/

AudioChannel *runningWaterChannel;

#region Room

/****************************
*   Room Functions
****************************/

function room_Load()
{
  if (oWater.Visible)
  {
    runningWaterChannel = aWater.Play(eAudioPriorityNormal, eRepeat);
    runningWaterChannel.SetRoomLocation(100, 119);
  }
}

function room_FirstLoad()
{

}

function room_AfterFadeIn()
{

}

function room_Leave()
{
  if (runningWaterChannel != null) runningWaterChannel.Stop();
}

function room_RepExec()
{

}

#endregion

#region Door

/****************************
*   Door Hotspot Functions
***************************/

function hDoorBath_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Doors.AnyClick(BernBath, oDoorBath.ID, 50, 108, eDirectionLeft, BernHallFirstFloor, 80, 117, eDirectionDown) == 0) Verbs.Unhandled();
}

#endregion

#region Hotspots

/****************************
*   Hotspot Functions
****************************/

function hFaucet_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(108, 107, eDirectionUp))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Ein Wasserhahn.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Der ist festgemacht.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      if (oWater.Visible)
      {
        oWater.Visible = false;
        runningWaterChannel.Stop();
      }
      else
      {
        oWater.Visible = true;
        runningWaterChannel = aWater.Play(eAudioPriorityNormal, eRepeat);
        runningWaterChannel.SetRoomLocation(100, 119);
      }
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      if (oWater.Visible)
      {
        player.Say("Das Wasser läuft bereits.");
      }
      else
      {
        oWater.Visible = true;
        runningWaterChannel = aWater.Play(eAudioPriorityNormal, eRepeat);
        runningWaterChannel.SetRoomLocation(100, 119);
      }
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      if (oWater.Visible)
      {
        oWater.Visible = false;
        aWater.Stop();    
      }
      else
      {
        player.Say("Der Wasserhahn ist doch schon zu.");
      }
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Es bewegt sich nicht.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Es bewegt sich nicht.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das kann ich hier nicht benutzen.");
    }
    else Verbs.Unhandled();
  }
}

function hSink_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(108, 107, eDirectionUp))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Ein Waschbecken.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Warum?");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Ich muss mir jetzt nicht die Hände waschen.");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Dazu gibt es keinen Grund.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Der Abfluss ist bereits montiert.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Es bewegt sich nicht.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Es bewegt sich nicht.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Damit würde ich das Waschbecken verstopfen.");
    }
    else Verbs.Unhandled();
  }
}

function hMirror_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(108, 107, eDirectionUp))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Ich seh in Spiegeln immer so blöd aus.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Was soll ich mit einem Spiegel?");	
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Ich seh in Spiegeln immer so blöd aus.");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Der lässt sich nicht Öffnen.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Der lässt sich nicht schließen.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Es bewegt sich nicht.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Es bewegt sich nicht.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das kann ich hier nicht benutzen.");
    }
    else Verbs.Unhandled();
  }
}

function hBath_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(220, 112, eDirectionUp))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Eine handelsübliche Badewanne.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Das schaffe ich nicht allein.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Ich möchte jetzt nicht baden.");	
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Diese Badewanne besitzt bereits ab Werk eine große Öffnung.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Die Öffnung an der Badewanne lässt sich nicht schließen.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Sie lässt sich nicht bewegen.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Sie lässt sich nicht bewegen.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Ich möchte die Badewanne nicht kaputt machen.");
    }
    else Verbs.Unhandled();
  }
}

function hMat_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(180,  112, eDirectionRight))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Eine Badezimmermatte.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Ich brauche keine Badezimmermatte.");	
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Jetzt nicht.");	
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Die lässt sich nicht öffnen.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Die lässt sich nicht schließen.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Die bleibt da liegen.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Die bleibt da liegen.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das kann ich hier nicht benutzen.");
    }
    else Verbs.Unhandled();
  }
}

function hToilet_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(255, 122, eDirectionRight))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      if (oToiletLid.Visible == false) player.Say("Eine Kloschüssel.");
      else player.Say("Ich glaube da unten schwimmt was.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Ja klar.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Da wäre ich ganz gerne alleine!");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      if (oToiletLid.Visible == true)
      {
        player.Say("Der Deckel ist schon offen.");
      }
      else
      {
        aDrawerClose.Play();
        oToiletLid.Visible = true;
        hToilet.Name = "Toilette>c";
      }
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      
      if (oToiletLid.Visible == true)
      {
        aDrawerClose.Play();
        oToiletLid.Visible = false;       
        hToilet.Name = "Toilette>o";
      }
      else
      {
        player.Say("Der Deckel ist schon zu.");
      }      
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Es bewegt sich nicht.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Es bewegt sich nicht.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das will ich nicht das Klo herunterspülen.");
    }
    else Verbs.Unhandled();
  }
}

function hWindow_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(285, 125, eDirectionRight))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Draußen ist auch nichts los.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Ich brauche jetzt kein Fenster.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Soll ich es öffnen oder schließen?");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Es klemmt.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Das ist schon zu.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Es bewegt sich nicht.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Es bewegt sich nicht.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das kann ich hier nicht benutzen.");
    }
    else Verbs.Unhandled();
  }
}

function hChain_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(285, 125, eDirectionRight))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Die Klospülung.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Die ist am Spülkasten festgemacht.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      aToiletFlush.Play();
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Ich sehe kein Sinn darin.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Das geht nicht.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      aToiletFlush.Play();
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Das geht nicht.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das kann ich hier nicht benutzen.");
    }
    else Verbs.Unhandled();
  }
}

#endregion

#region Objects

/****************************
*   Object Functions
****************************/

#endregion

















