#region Room

/****************************
*   Room Functions
****************************/

function room_Load()
{

}

function room_FirstLoad()
{

}

function room_AfterFadeIn()
{

}

function room_Leave()
{

}

function room_RepExec()
{

}

#endregion

#region Door

/****************************
*   Door Hotspot Functions
***************************/
function hDoorBedroom_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Doors.AnyClick(BernBedroom, oDoorBedroom.ID, 50, 108, eDirectionLeft, BernHallFirstFloor, 235, 112, eDirectionDown) == 0) Verbs.Unhandled();
}

#endregion

#region Hotspots

/****************************
*   Hotspot Functions
****************************/

function hBed_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(105, 117, eDirectionRight))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Hier schlafen Mom und Dad.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Das bleibt hier.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Ich will jetzt nicht schlafen.");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Das ist doch nur ein Bett.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Das ist doch nur ein Bett.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Es bewegt sich nicht.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Es bewegt sich nicht.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das kann ich hier nicht benutzen.");
    }
    else Verbs.Unhandled();
  }
}

function hWindow_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(285, 112, eDirectionRight))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
			player.Say("Ich kann genau in Hoagies Fenster sehen.");
      Wait(20);
			player.Say("Was zum ... Ist das ein Teleskop?");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Ich brauche jetzt kein Fenster.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Soll ich es öffnen oder schließen?");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Es klemmt.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Das ist schon zu.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Es bewegt sich nicht.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Es bewegt sich nicht.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das kann ich hier nicht benutzen.");
    }
    else Verbs.Unhandled();
  }
}

function hNightStandL_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(105, 117, eDirectionUp))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      if (oDoorL.Visible == false)
      {
        player.Say("Ein Nachtschränkchen.");
      }
      else
      {
        player.Say("Ein leeres Nachtschränkchen.");
        
      }
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("So was nehme ich nicht mit.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Soll ich es öffnen oder schließen?");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      if (oDoorL.Visible == false)      
      {
        aCreak.Play();
        oDoorL.Visible = true;
      }
      else 
      {
        player.Say("Ist doch schon offen.");
      }
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      if (oDoorL.Visible == false)      
      {
        player.Say("Ist doch schon zu.");
      }
      else 
      {
        aCreak.Play();
        oDoorL.Visible = false;
      }
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Der lässt sich nicht verschieben.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Der lässt sich nicht verschieben.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das will ich nicht auf das Schränkchen legen.");
    }
    else Verbs.Unhandled();
  }
}

function hNightStandR_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  if (Verbs.AnyClickMove(225, 117, eDirectionUp))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      if (oDoorR.Visible == false)
      {
        player.Say("Ein Nachtschränkchen.");
      }
      else
      {
        player.Say("Ein leeres Nachtschränkchen.");
      }
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("So was nehme ich nicht mit.");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Soll ich es öffnen oder schließen?");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      if (oDoorR.Visible == false)      
      {
        aCreak.Play();
        oDoorR.Visible = true;
      }
      else 
      {
        player.Say("Ist doch schon offen.");
      }
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      if (oDoorR.Visible == false)      
      {
        player.Say("Ist doch schon zu.");
      }
      else 
      {
        aCreak.Play();
        oDoorR.Visible = false;
      }
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Der lässt sich nicht verschieben.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Der lässt sich nicht verschieben.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das will ich nicht auf das Schränkchen legen.");
    }
    else Verbs.Unhandled();
  }
}

#endregion

#region Objects

/****************************
*   Object Functions
****************************/

function oLampLeft_AnyClick(Object *theObject, CursorMode mode)
{
  if (Verbs.AnyClickMove(105, 117, eDirectionUp))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Eine Lampe.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Schon mal was von Taschenlampe gehört?");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Dann wird es hier dunkel.");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Das mache ich nicht.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Sie sieht geschlossen aus.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Ich lasse sie besser da stehen.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Ich lasse sie besser da stehen.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das kann ich hier nicht benutzen.");
    }
    else Verbs.Unhandled();
  }
}

function oLampRight_AnyClick(Object *theObject, CursorMode mode)
{
  if (Verbs.AnyClickMove(225, 117, eDirectionUp))
  {
    if (Verbs.UsedAction(eGA_WalkTo))
    {
      // Wait(5);
    }
    else if (Verbs.UsedAction(eGA_LookAt))
    {
      Wait(5);
      player.Say("Eine Lampe.");
    }
    else if (Verbs.UsedAction(eGA_PickUp))
    {
      Wait(5);
      player.Say("Schon mal was von Taschenlampe gehört?");
    }
    else if (Verbs.UsedAction(eGA_Use))
    {
      Wait(5);
      player.Say("Dann wird es hier dunkel.");
    }
    else if (Verbs.UsedAction(eGA_Open))
    {
      Wait(5);
      player.Say("Das mache ich nicht.");
    }
    else if (Verbs.UsedAction(eGA_Close))
    {
      Wait(5);
      player.Say("Sie sieht geschlossen aus.");
    }
    else if (Verbs.UsedAction(eGA_Pull))
    {
      Wait(5);
      player.Say("Ich lasse sie besser da stehen.");
    }
    else if (Verbs.UsedAction(eGA_Push))
    {
      Wait(5);
      player.Say("Ich lasse sie besser da stehen.");
    }
    else if (Verbs.UsedAction(eGA_UseInv))
    {
      Wait(5);
      player.Say("Das kann ich hier nicht benutzen.");
    }
    else Verbs.Unhandled();
  }
}

#endregion











